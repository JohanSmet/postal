////////////////////////////////////////////////////////////////////////////////
//
// Copyright 2016 RWS Inc, All Rights Reserved
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of version 2 of the GNU General Public License as published by
// the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
//
// HardwareSettings.cpp
// Project: Nostril (aka Postal)
//
// History:
//		18/11/23	JS	Started.
//
//////////////////////////////////////////////////////////////////////////////
//
// Implementation for CHardwareSettings object.  Each instance contains settings
// for Postal.
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// C Headers -- Must be included before RSPiX.h b/c RSPiX utilizes SHMalloc.
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// RSPiX Headers.
///////////////////////////////////////////////////////////////////////////////
#include "RSPiX.h"

///////////////////////////////////////////////////////////////////////////////
// Postal Headers.
///////////////////////////////////////////////////////////////////////////////

#include "HardwareSettings.h"
#include "CompileOptions.h"
#include "main.h"

//////////////////////////////////////////////////////////////////////////////
// Module specific macros.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Module specific typedefs.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Exported (extern) variables.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Module specific (static) variables / Instantiate class statics.
//////////////////////////////////////////////////////////////////////////////

static CHardwareSettings g_HardwareSettings;

//////////////////////////////////////////////////////////////////////////////
// Module specific (static) protos.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Functions.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Set settings to default values
//////////////////////////////////////////////////////////////////////////////
CHardwareSettings::CHardwareSettings(void)
{
}

//////////////////////////////////////////////////////////////////////////////
// Destructor
//////////////////////////////////////////////////////////////////////////////
CHardwareSettings::~CHardwareSettings()
{
}

//////////////////////////////////////////////////////////////////////////////
// Read settings that are stored in preference file
//////////////////////////////////////////////////////////////////////////////

int16_t CHardwareSettings::LoadPrefs(RPrefs* pPrefs)
{
	int16_t sResult = 0;

	pPrefs->GetVal("Video", "DeviceWidth", MAIN_SCREEN_MIN_WIDTH, &m_sDeviceWidth);
	pPrefs->GetVal("Video", "DeviceHeight", MAIN_SCREEN_MIN_HEIGHT, &m_sDeviceHeight);
	pPrefs->GetVal("Video", "UseCurrentDeviceDimensions", 1, &m_sUseCurrentDeviceDimensions);

	pPrefs->GetVal("Audio", "DeviceRate", MAIN_AUDIO_RATE, &m_sAudioSamplesPerSec);
	pPrefs->GetVal("Audio", "DeviceBits", MAIN_AUDIO_BITS, &m_sDeviceBitsPerSample);
	pPrefs->GetVal("Audio", "DeviceBufTime", MAIN_AUDIO_BUFTIME, &m_sBufTime);
	pPrefs->GetVal("Audio", "MixBits", 16, &m_sMixBitsPerSample);

	if (!sResult && pPrefs->IsError()) {
		sResult = -1;
	}

	return sResult;
}

//////////////////////////////////////////////////////////////////////////////
// Write settings that are stored in preference file
//////////////////////////////////////////////////////////////////////////////
int16_t CHardwareSettings::SavePrefs(RPrefs* pPrefs)
{
	pPrefs->SetVal("Video", "DeviceWidth", m_sDeviceWidth);
	pPrefs->SetVal("Video", "DeviceHeight", m_sDeviceHeight);
	pPrefs->SetVal("Video", "UseCurrentDeviceDimensions", m_sUseCurrentDeviceDimensions);

	pPrefs->SetVal("Audio", "DeviceRate", m_sAudioSamplesPerSec);
	pPrefs->SetVal("Audio", "DeviceBits", m_sDeviceBitsPerSample);
	pPrefs->SetVal("Audio", "DeviceBufTime", m_sBufTime);
	pPrefs->SetVal("Audio", "MixBits", m_sMixBitsPerSample);

	return pPrefs->IsError();
}

//////////////////////////////////////////////////////////////////////////////
// Load settings that are stored in game file
//////////////////////////////////////////////////////////////////////////////
int16_t CHardwareSettings::LoadGame(RFile* pFile)
{
	return 0;
}

//////////////////////////////////////////////////////////////////////////////
// Save settings that are stored in game file
//////////////////////////////////////////////////////////////////////////////
int16_t CHardwareSettings::SaveGame(RFile* pFile)
{
	return 0;
}

//////////////////////////////////////////////////////////////////////////////
// Temporarily set settings for demo mode (file is for saving current settings)
//////////////////////////////////////////////////////////////////////////////
int16_t CHardwareSettings::PreDemo(RFile* pFile)
{
	return 0;
}

//////////////////////////////////////////////////////////////////////////////
// Restore settings to what they were prior to demo mode
//////////////////////////////////////////////////////////////////////////////
int16_t CHardwareSettings::PostDemo(RFile* pFile)
{
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
// Internal functions.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// EOF
///////////////////////////////////////////////////////////////////////////////
